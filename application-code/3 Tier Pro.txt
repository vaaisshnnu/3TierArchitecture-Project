-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
************************************************************************  1. Create a VPC for the Project   ************************************************************************
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 ****** Go to "VPC" --- > Create VPC 
 Select "VPC & More", 
 Name : 3 tier VPC
 IPV4 :192.168.0.0/22
 IPV6 : No required
 Tenancy : Default
 Select 2 AZ's
 2 Public Subnets & 4 Private Subnets
 Nat Gateway = In 1 AZ
 VPC Endpoints = None

                                                                        Now you VPC is Created ! Hurray :)
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 ******************************************************************  2. Customize the subnets for easy identification  ************************************************************
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Click on you VPC's = Verify the VPC naming (3 tier VPC)
click on "View VPC" --> Go to subnets section
 a. Named the Public subnets which belongs to WEB layer as "WEB-Public-Subnet1-ap-south-1a & WEB-Public-Subnet2-ap-south-1b"
 b. Named the Private subnets which belongs to Private subnet 1 & 2 for APP layer's as "APP-Private-Subnet1-ap-south-1a" & "APP-Private-Subnet2-ap-south-1b"
 c. Named the Private subnets which belongs to Private subnet 3 & 4 for DB layer's as  "DB-Private-Subnet3-ap-south-1a" & "DB-Private-Subnet4-ap-south-1b"

                                                      Now you've have customized the subnets for your easy identification ! Hurray :)
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*************************  3. Security Groups we need to create 5 SG's - for External Load Balancer, Web Servers, Internal LB, APP Servers, DB servers ********************************
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
********* SG1 for Internet Facing - External Application Load Balanced (ELB) --> 
     Named as WEB-Public-ELB-SG, 
     Select Custom VPC (3 tier VPC) 
     Add an Inbound Rule for http with anywhere IPV4 0.0.0.0/0 traffic

********* SG2 for Web Tier Resources
    Named as WEB-Tier-SG
    Select Custom VPC (3 tier VPC)  
    Add 2 Inbound Rule's for http traffic with port number as 80 alongside with "WEB-Public-ELB-SG" group traffic
                             http traffic with port number as 80 alongside with custom IP range 192.168.0.0/22 traffic

********* SG3 for App Tier
    Named as APP-Tier-SG
    Select Custom VPC (3 tier VPC) 
    Add Inbound Rule's for TCP with 4000 port 192.168.0.0/22 (since it's a REACT JS application runs on 4000 port number)

********* SG4  for Internal LB
    Named as Internal-Private-ELB-SG
    Select Custom VPC (3 tier VPC) 
    Add Inbound Rule's for http traffic with port number as 80 alongside with custom IP range 192.168.0.0/22

********* SG5 for DB Tier ( We are using RDS Service as a DB )
    Named as RDS-DB-SG 
    Select Custom VPC (3 tier VPC) 
    Add Inbound Rule's for "MySQL/Aurora" with TCP protocol 3306 port with "custom" IP range "192.168.0.0/22"
 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*****************************************  4. Create S3 Bucket to upload the code { For copying the Date to EC2 instances from S3 bucket } ****************************************
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Go to My GitHub -> Code option -> Copy the code "https://github.com/vaaisshnnu/3TierArchitecture-Project.git"

Create a Folder in your Systems --> Open git terminal --> git clone https://github.com/vaaisshnnu/3TierArchitecture-Project.git
 
Now the code is cloned to your local system
Upload the "application code" folder to S3 bucket

Open S3 service --> 
Create a "General Purpose bucket"
Named as = s3bucket3tiervpc
Go inside of your bucket click on upload
Upload the "application code" folder to S3 bucket
                                                                  You've uploded the application code to the S3 Bucket! Hurary :)

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
****************************************************************   5. Create IAM Role for EC2 instance  ****************************************************************
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Since we have 2 EC2 Instances in APP & DB Tier which are in the Private Subnets and we can not expose the Date to the outsiders

We have Two ways Connect the EC2 from Public to Private subnets

Option 1 : Create a BH and then connect to Private EC2
Option 2 : Systems Manager (SSM) - With the help is SSM agent we can connect to Private instances which are in Private subnets, But in order to establish the connection order SSM agent require an IAM role (Amazon IAM Role for SSM)

Here I've select "AmazonEC2RoleforSSM" since it will give access for EC2 & S3 bucket too in same policy

5.1. Go to "IAM" Service

Roles Section ---> Create IAM Role
Select Trusted Entity : "AWS Service"
Use Case : "EC2"
For the 2nd Time as well Select the Use Case as : "EC2" 
Select the Role Type : "AmazonEC2RoleforSSM"
Role Name : "3-Tier-EC2-Role"

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  ************************************************************************** 6. Data Base Configuration ********************************************************************************
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Before Creating the RDS we need to Create the subet for the RDS to attach the DB instances as it's requried while creating the RDS DB.

Go to "RDS" Service in AWS

*********  6.1 RDS DB Subnet Group Creation ---> Create DB Subnet Group 
 
Named as "RDS-DB-SubnetGroup"
 Select the Custome VPC (3 tier VPC) 
 Availability zones : Since we need 2 AZ's select 2 AZ's
 Subnets  - Select  DB1 & DB2 subnets "DB-Private-Subnet3-ap-south-1a" & "DB-Private-Subnet4-ap-south-1b"
Click on create

Now we have to Attach the Subnets Group to the RDS DB

********* 6.2 Go to "Databases" section - Click on Create Database with "Standard Create" option

Engine Options - My SQL
Engine Version - MYSQL 8.0.35
Templates - Free Tier
Settings (DB Instance Identifier) - DataBase-1
Credentials : "admin" with "self Managed" Option
    Have the password Handy 
Processor  Type : db.t4g.micro {2CPU, 1 GiB Ram}
Storage Type: SSD (gp2) with "20" GB
Connectivity : Don't Connect to EC2 Compute Resource
Network Type : IPV4
VPC : Select the Customer VPC (3 tier VPC) 
DB Subnet Group : Select the custom Subnet group "RDS-DB-SubnetGroup"
Public Access : "No"
VPC Security group firewall : Choose existing Security Group with "RDS-DB-SG"
Availability Zone - No preference
RDS Proxy - Not required
Monitoring - Not required
Additional Configurations :
Do you want the DB to take the Backups : No " uncheck it"  { If yes, Then give the retention Days } 
Encryption- Be it be enabled with default options (since it's not chargeable)
Maintenance (Auto Minor Version Upgrade) - " uncheck it" 
      (Since it's for temporary purpose I've unchecked it as there are no upgrades but in real time if required it's recommended to use the option)
Maintenance Window - "No Preference"

=======>>>> Check the Estimated Monthly Costs & "Click Create Database"
------ >>>> Status of the Database will change from "Creating" to "Available"

*********6.3 Go to the "Databases section" -- Scroll down to the Connectivity & Security Tab Look out for "Endpoint & Port" details  

 Note : It will take few mins to create a DB , Please wait for sometime, Else move with Step 7 - you can collect the endpint details later as well :)

----------------------------------------------------------------************************************************--------------------------------------------------------------------------
********************************************************************** 7. Configuring App Tier Resources **********************************************************************
-----------------------------------------------------------------**********************************************--------------------------------------------------------------------------
Launch EC2's in Private Subnets for APP Tiers in Custom VPC to connect it with the Database, Such that the Database should be accessible from the Private EC2 instance which is in Private Subnet

Since we need 2 EC2 in APP Tier which are in Private subnet 1 & Private subnet2, 
 --> Lets Create Only One EC2 instance manually in Private subnet 1 and configure it with Database server in Private Subnet 3 such that the DB is accessible from the EC2 
     then We will place an Internal Load Balancer to automate the creation of other EC2 instance which is in Private subnet2.

********* 7.1 Go to "EC2" Service

Launch Instances 
Name : App-Tier-Instance-1
AMI : Amazon Linux 2 AMI
Type : t2.micro
Key Pair : None 
     Since I've used Amazon Session Manager to connect to EC2, But in Realtime it's recommended practice to create a key pair and store it in Safe Place

>>> Edit the Network Settings: >>>>
VPC : Select the Private subnet "APP-Private-Subnet1-ap-south-1a"
Auto Assign Public IP: Disable 
Firewall Security Group : Select Existing Security Group "APP-Tier-SG"
Storage: 8 GiB GP2
 
Click on Advanced Details
>>> IAM Role : Select Existing role "3-Tier-EC2-Role"

Click on "Launch Instance" and wait for the EC2 to come to Running State

As I have not donwloaded the key pair, Wait for 5 mins then--> Go to the instance --> Click on the instance Connect --> Session Manager --> Connect

$ sudo su -
$ cd /home/ec2-user
$ whoami
$ pwd 
$ sudo yum install mysql -y    --> My SQL Client will get installed

Now it's time to connect the DB with EC2, Copy the DB ENdpoint and have the password handy at step 6.4

$ mysql -h <DB EndPoint> -u admin -p 

mysql -h database-1.czykgm68ybt5.ap-south-1.rds.amazonaws.com- u admin -p
vaaisshnnu2025
    Enter the copied endpoint in the command and provide the password when asked

MYSQL [(none)] >

Now if the above command gets reflected that mean the connection is successful and you've connected.
Let's create a DB with a name as gamedb

MYSQL [(none)] > CREATE DATABASE gamedb;


MYSQL [(none)] > SHOW DATABASES
this will show the DB's which was created

MYSQL [(none)] > USE gamedb;
  This command will change the DB from none to gamedb, Thus means you are in gamedb now currently.

MYSQL [gamedb] >

CREATE TABLE IF NOT EXISTS transactions(
  id INT NOT NULL AUTO_INCREMENT, 
  amount DECIMAL(10,2), 
  description VARCHAR(100), 
  PRIMARY KEY(id)
);

     To create a table inside the Database, Execute the below code as a single code. Here we are creating a table with the name 'transactions'

MYSQL [gamedb] > SHOW TABLES;
   To verify whether table got created or not;

MYSQL [gamedb] > INSERT INTO transactions (amount, description) VALUES ('400', 'fuel');
  Lets insert some info into the table

MYSQL [gamedb] > SELECT * FROM transactions;
   To verify whether the entry is really created or not, Run the below command


MYSQL [gamedb] > exit
Bye
  To come out of the DB and You will see 'ec2-user' at the end of command line and at the beginning of command line you will see 'root'

[root@ip-192.168.x.x ec2-user]#

To Update Application Configuration to with DB information

Go to your system where you've cloned the application code (Folder/**application-code/app-tier/DbConfig.js**)
  - Navigate to apptier
  - Open DbConfig.js file in editor and 
 Update the DB_HOST : < with your DB Endpoint >
 Update DB_PWD : < with your credentials>
 Update DB_DATABASE : <with your named database>

and CTRL+S--> save it

Go to the S3 service --> Open the bucket -> application-code/app-tier/
upload the DbConfig.js

Since we have not enabled the versioning of the bucket it will replace the old file with new file.

Now DB Configuration has been uploaded with the new file in S3

Go to the Instance session manager and Continue with further commands to Install and Configure Node.js, NVM (Node Version Manager) and PM2

********* 7.2 Installing Node JS :********* ********* 
#curl -o- https://raw.githubusercontent.com/avizway1/aws_3tier_architecture/main/install.sh | bash
#source ~/.bashrc
   It will be sourced to the bash shell

#nvm install 16
 This will install NVM 

#nvm use 16 (You will see 'Now using node v16.20.2)
  To use NVM 
 
We need to run node as a service now for the Node JS to work, For this reason we have to the install PM2 
#npm install -g pm2 
To run node as a service, we will install pm2 (You will see 'found 0 vulnerabilities)

Download application code from S3 and start the application

#cd ~/ 
#sudo aws s3 cp s3://<S3BucketName>/application-code/app-tier/ app-tier --recursive

       Ex: sudo aws s3 cp s3://s3bucket3tiervpc/application-code/app-tier/ app-tier --recursive

#ls ---> You will see 'app-tier' folder

#cd app-tier/
 Let's install Node Port Manager now inside the app-tier for the configuration
#npm install
 
#ls ----> You will see 'index.js' file. We have to start that.

#pm2 start index.js 
     (You will see the status as 'online')

To verify the statuses
#pm2 list (or) pm2 status
      Status should be online

#pm2 logs (You will not see anything in red color, everything in white color you should see)
      At the end you will see something like; http://localhost:4000

#pm2 startup
 To start the PM2

#pm2 save ---> To save the configuration	

Verify that the application is running by executing

#curl http://localhost:4000/health
        It should return: "This is the health check"

With this we have completed the Database application configuration with one EC2 server

--------------------------------------------*********************************************************************************************************--------------------------------------
******************8. Now it's time to Create Internal Load Balancer to automate the "Configuration Process setup Second EC2 in APP Tier with the DB Tier" ************************
--------------------------------------------*********************************************************************************************************--------------------------------------

Before create a LB we need to have Target Group and have to attach it with LB

We will update Nginix(web server) Configuration with Internal Load Balancer DNS Name

***********8.1 Lets start by creating Target Group
        Go to "EC2" service --> target Groups section
         Choose a target type: Instances
         Target Group Name: "APP-INTERNAL-LoadBalancer-TG"
         Protocol Port : HTTP - 80
         IP Address Type : IPV4
       Protocol Version : "HTTP1"
       VPC: select Custom VPC (3 tier VPC)
       Health Checks : "HTTP"
 Health Check path : "/health"
Click on Next

Select the instance and click on " Include as pending below" --> Create Target Group

*********** 8.2 Creating Internal Application Load Balancer

Go to Load Balancer section & Select Application Load Balancer
Name : Internal-Load Balancer
Scheme : Internal (since it's in internal load balancer and being used between the private subnets inside the VPC)
IP Address : IPV4
VPC Network Mappings: Select the custom VPC (3 tier VPC) and select the availability zones then select the APP 1 & APP2 subnets
Security Group : Internal-ALB-SG (Chose the internal app load balancer security group)
Listeners & Routing: HTTP with 80 Port with "APP-INTERNAL-LoadBalancer-TG" target group
Click on Create to get this created, Wait for the status to get changed form "Provisioning" to "success" and Copy the DNS Name of Load balancer

***********8.3 Now we will configure the INTERNAL-LoadBalancer-TG URL in Nginix server

Go to the downloaded code folder in local system ----> Open application-code/nginx.conf file and in the end of the file you will see something like below;
        
#proxy for internal lb
        location /api/{
                proxy_pass http://[REPLACE-WITH-INTERNAL-LB-DNS]:80/;
        }

Replace the LB DNS in the above

********************** 8.3.1 Upload the nginx.conf to the S3 bucket, Since we have not enabled the versioning of the bucket it will replace the old file with new file.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
************************************************************* 9. Creation of Web tier resources along with External Load Balancer ********************************************************
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Launch EC2's in Public Subnets for WEB Tiers in Custom VPC to connect it with the Private EC2's

Since we need 2 EC2 in WEB Tier which are in Public subnet 1 & Public subnet2, 
 --> Lets Create Only One EC2 instance manually in Public subnet 1 and configure it with APP Tier server in Private Subnet 2 such that it can be accessible then We will place an External Load Balancer to automate the creation of other EC2 instance which is in Public subnet2 along with Autoscaling group


Go to "EC2" Service

Launch Instances 
Name : WebTierInstance1
AMI : Amazon Linux 2 AMI
Type : t2.micro
Key Pair : None 
     Since I've used Amazon Session Manager to connect to EC2, But in Realtime it's recommended practice to create a key pair and store it in Safe Place

Edit the Network Settings:
VPC: Custom VPC (3 tier VPC)
Subnet : Select the Public subnet "Demo-vpc-subnet-public1"
Auto Assign Public IP: Enable 
Firewall Security Group : Select Existing Security Group "WEB-SG"
Storage: 8 GiB GP2
 
Click on Advanced Details
IAM Role : Select Existing role "3-Tier-EC2-Role"

Click on "Launch Instance" and wait for the EC2 to come to Running State

Since I've not downloaded the keypair, I'm using AWS Session Manager to connect to instance
 Go to the instance--> Click on the instance Connect --> Session Manager --> Connect

Make sure to open port 443 in security group rules of ec2 instance

$sudo -su ec2-user
    To work as an ec2-user

[ec2-user@ip<public_IP> bin]$ whoami
ec2-user   ----> you should see that you are ec2-user now, Let's go to the ec2-user now & start the setup process by installing the Nginix

$cd /home/ec2-user
$pwd
$curl -o- https://raw.githubusercontent.com/avizway1/aws_3tier_architecture/main/install.sh | bash
$source ~/.bashrc
$nvm install 16
$nvm use 16

Copy the web-tier content from S3 bucket to our ec2 instance

$aws s3 cp s3://<S3 Bucker Name>/application-code/web-tier/ web-tier --recursive
             Ex: aws s3 cp s3://s3bucket3tiervpc/application-code/web-tier/ web-tier --recursive


$ls ----> You will see 'web-tier'

$cd web-tier
$npm install

   Wait for the Node Port Manager to install 
$npm run build

 Wait for the Build Process to get complete 

Nginix Installation:

$sudo amazon-linux-extras install nginx1 -y

Now let's Update Nginx configuration by executing the below commands:

$cd /etc/nginx (Your are in nginx path)

$ls ----> You will see 'nginx.conf' file

When we install Nginix server it will create a Nginix configuration file and we've update it with our Earlier updated nginx.conf file with the internal load balancer details, So we've to replace the old nginx file with the updated one. So First I'm removing the existing Nginx file and copying the Nginix file from the S3 bucket & we will restart the Nginx service to reflect the changes.

$sudo rm nginx.conf 

$sudo aws s3 cp s3://<S3 Bucker Name>/application-code/nginx.conf .
          Ex: sudo aws s3 cp s3://s3bucket3tiervpc/application-code/nginx.conf .

$sudo service nginx restart

$chmod -R 755 /home/ec2-user

$sudo chkconfig nginx on

To check the output of the App, we can check using the Web-Tier-Instance public IP. But before checking lets open port no 80 with http, Anywhere IPv4, 0.0.0.0/0 ---> Save rules 

Go to Instances --> Select the WEB Tier EC2 instance --> scroll down to security --> Open the "WEB-SG" group --> Edit the inbound rules --> Add Rule --> source: http || Port 80 || Anywhere IPV4 || 0.0.0.0/0 ---> Save rules 

--->Now Copy & Paste the pubic IP of Web-Tier-Instance in new tab of browser ----> You will see the app ----> Enter the data in the app


********* ********* ********* ********* ********* ********* ************** ********* ********* ********* ********* ********* ********* ********* ********* ********* ********* ********* ********* ***************** ******** ******** ******** ********* ******** This is about 3 tier architecture********* ******** ********* ******** ********* ******** ********* ***************
 ********************************************************************************************************************************************************************************************
********* ******** ********* ******** ********* ******** ********* ******** ********* ******** ********* ******** ********* ******** ********* ******** ********* ******** ********* ******** 
If you want to Buy a Domain and from Route 53 you can proceed further by sessting up ASG, LT, ALB and Creating Records for R53 with a Hosted Zone and Issue a Certificate for SSL
********************************************************************************************************************************************************************************************* ********* ******** ********* ******** ********* ******** ********* ******** ********* ******** ********* ******** ********* ******** ********* ******** ********* ******** ********* ******** 

******** ******** 10. Creation of Internet Facing External Load Balancer along with Target Group******** 

******** 10.1 Target Group for External Load Balancer
 
 Go to "EC2" service --> Navigate to "Target Group" option under "Load Balancing" section

Create Target Group
Choose a Target Group: Instances
Target Group Name : External-WebTier-TG
Protocol : http : 80
IP address Type: IPV4
VPC: "Demo VPC"
Protocol version: HTTP1
Health Check : /
    Click on Next 
Select the "Web tier instance" and Include as pending below then create the Target Group.


10.2 Go to Load Balancer section & Select Application Load Balancer
Name : ExternalLoadBalancer
Scheme : Inter-Facing (since it's in External load balancer and being used between the public subnets by the users)
IP Address : IPV4
VPC Network Mappings: Select the custom VPC (3 tier VPC) and select the availability zones then select the choose "Public1 & Public 2 subnets"
Security Group : WEB-ALB-SG (Chose the external web layer load balancer security group)
Listeners & Routing: HTTP with 80 Port with "External-Web-TG" target group
Click on Create to get this created, Wait for the status to get changed form "Provisioning" to "success"

Go to Load Balancers tab --> open the External Web Load Balancer "External-WEB-ALB"
Edit Inbound Rules
Navigate to Listeners & Rules Details:
Click on Add listener
Protocol : HTTPs with 443
Routing Action: Forward to Target Group & 
Target Group: select the external web facing load balancer target group "External-Web-TG"
Certificate Source : "From ACM" then select the certificate which was generated
Click on add

Also open WEB-ALB-SG --> Add in inbound rule with HTTPS with 443 port with Anywhere IPV4 0.0.0.0/0 as well


******** ******** 11. Mapping Domain with Web External Load Balancer Target Group & Mapping External Load Balancer DNS with Route 53
Got to Route53 service
Get started--> Register a Domain
Search for Domain : learnwithkastro.com
once it's available --> click on select
Proceed to checkout
based on usage decide for auto-renew option--> Next
Provide the Contact information then click on next
Then review the details & Click on Accept & Submit 

Click on Check status on the Pop UP---> Domain will be available under the "Registered domain" section

Navigate to "Hosted Zones" section and Click on the Domain name which you've created

Click on Create a record --> 
Record Name: Leave it blank (unless you want to specify any subdomain)
Record Type: A Type Record
 Alias option: "Enable" it as a best practice (if you select the alias option then it will ask you where you want to route the traffic)
 Route Traffic to: Application & Classic load Balancer
 Choose Region: Select the region where you've your resources
 Choose Load Balancer : External Web load balancer
 Routing Policy: Simple Routing Policy

Click on Create Record.

NS & SOA will be created by default, Do not worry about it

Open "Certificate Manager" service in AWS
Request a certificate- Public certificate
Give the domain once you've purchased
DNS Validation is requires- Select it
Select the RSA2048 Algorithm


Scroll down to domain--> Create Record in Route 53--> Check the domain--> Create Record

Wait for the status to change to "certificate issued"

Now give the Domain in Browser

******** ******** ******** 12. Now let's create the Auto Scaling Group for High Availability for APP Tier & WEB Tier Instances

To Create another instance we will create AMI such that all the configuration will be launched with the existing same copy

Create AMI --> Create Launch Template --> Create Auto Scaling Group

12.1 To Create AMI:
Go to "EC2"--> 
Select App Tier Instance--> Actions--> Images & Templates --> Create Image
Image Name: APP-Tier-AMI
Uncheck Reboot option
Click on Create Image

Select Web Tier Instance--> Actions --> Images & Templates --> Create Image
Image Name: WEB-Tier-AMI
Uncheck Reboot option
Click on Create Image

******** 12.2 Create Launch Template:
Now AMI's have been created, By using these AMI's we will create Launch Templates

Click on Create Launch Template
Launch Template Name : App- Tier-Lt
Select the tick box for auto scaling guidance
Under the AMI section --> My AMI's & Select the APP-Tier AMI
Key pair: Not required
Instance Type: t2.micro
Subnet Setting: Don't Include in Launch Template
Security Group: Existing Group --> select the APP-SG
Advanced Details:
IAM Profile : Attach the IAM Role (3-Tier-EC2-Role)

******** 12.3  Create Auto Scaling Group: Go to Auto Scaling Group
Create ASG-->
ASG Name: APP-Tier-SG
Launch Template: Choose the app tier Launch Template [ App- Tier-Lt ]
Version: Default
VPC: Select the Custom VOC (3 tier VPC)
Availability Zones & Subnets : Select the APP1 & APP 2 subnets
Availability Zone Distribution: Balanced Best effort
Load Balancing : Attach to existing Load Balancer 
Target Group: APP-Internal-TG
Health Checks - select it required lese leave it as default
Scaling Limits : Min- 2  & Max-4
Auto Scaling Policies : None
Next --> Next--> Review --> Create

******** 12.4 Similar way create the AMI,LT & ASG for App Tier


To delete the setup, as per the order wise
1.  First delete ASG
2.  Next delete both LBs
3.  Next delete both TGs
4.  Next delete both AMIs
5.  Next delete both Snapshots of AMIs
6.  Next delete DB
7.  Next delete S3 Bucket
8.  Next delete Certificate
9.  Next delete Route 53 record
10. Next delete NAT GW
11. Next delete Elastic IP. This came because of NATGW
12. Next delete VPC





































































